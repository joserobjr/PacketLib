buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}


evaluationDependsOn('Sponge')

apply plugin: 'forge'
apply plugin: 'maven'

version = "1.0"
group= "com.thomas15v.packetlib" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "PacketLib"

ext.mixinSrg = new File(project.buildDir, "tmp/mixins/mixins.srg")
ext.mixinRefMap = new File(project.buildDir, "tmp/mixins/mixins.sponge.refmap.json")

sourceCompatibility = '1.6'
targetCompatibility = '1.6'

minecraft {
    version = "1.8-11.14.1.1341"
    runDir = "eclipse"

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20141130"
}

repositories{
    maven {url = "https://repo.spongepowered.org/maven"}
}

dependencies{
    compile project("Sponge")

}

processResources
        {
            // this will ensure that this task is redone when the versions change.
            inputs.property "version", project.version
            inputs.property "mcversion", project.minecraft.version

            // replace stuff in mcmod.info, nothing else
            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'

                // replace version and mcversion
                expand 'version':project.version, 'mcversion':project.minecraft.version
            }

            // copy everything else, thats not the mcmod.info
            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
            }
        }

tasks.withType(JavaCompile) {
    options.compilerArgs += [ '-Xlint:all', '-Xlint:-path', "-AreobfSrgFile=${tasks.reobf.srg}", "-AoutSrgFile=mixins.srg" ]
    options.deprecation = true
    options.encoding = 'utf8'
}

compileJava {
    options.compilerArgs += [
            '-Xlint:all',
            '-Xlint:-path',
            '-Xlint:-processing',
            "-AoutSrgFile=${project.mixinSrg.getCanonicalPath()}",
            "-AoutRefMapFile=${project.mixinRefMap.getCanonicalPath()}",
            "-AreobfSrgFile=${project.file('build/srgs/mcp-srg.srg').getCanonicalPath()}"
    ]
    options.deprecation = true
    options.encoding = 'UTF-8'
}

task copySrgs(type: Copy, dependsOn: "genSrgs") {
    // using some FG hacks here
    from plugins.getPlugin("forge").delayedFile("{SRG_DIR}")
    include '**/*.srg'
    into 'build/srgs'
}
setupDecompWorkspace.dependsOn copySrgs
setupDevWorkspace.dependsOn copySrgs
compileJava.dependsOn copySrgs

def manifestEntries = [
        "FMLCorePlugin": "com.thomas15v.packetlib.PacketLibCoreMod",
]

jar {
    manifest.mainAttributes(manifestEntries)
}


reobf {
    reobf.addExtraSrgFile project.mixinSrg
}